apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "anomaly-detection.fullname" . }}
  labels:
    {{- include "anomaly-detection.labels" . | nindent 4 }}
  {{- with .Values.podAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "anomaly-detection.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "anomaly-detection.selectorLabels" . | nindent 8 }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- $secretName := include "obliq-sre-agent.imagePullSecretName" $ }}
      {{- if $secretName }}
      imagePullSecrets:
        - name: {{ $secretName }}
      {{- end }}
      serviceAccountName: {{ include "anomaly-detection.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.initContainers.enabled }}
      initContainers:
        {{- if .Values.initContainers.waitForNeo4j.enabled }}
        - name: wait-for-neo4j
          image: {{ .Values.initContainers.waitForNeo4j.image }}
          command:
            - sh
            - -c
            - |
              echo "Waiting for Neo4j to be ready..."
              until nc -z {{ .Values.initContainers.waitForNeo4j.host }} {{ .Values.initContainers.waitForNeo4j.port }}; do
                echo "Neo4j not ready, waiting 5 seconds..."
                sleep 5
              done
              echo "Neo4j is ready!"
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 50m
              memory: 32Mi
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.global.imageRegistry | default "avesha.azurecr.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.command }}
          command:
            {{- toYaml .Values.command | nindent 12 }}
          {{- end }}
          {{- if .Values.args }}
          args:
            {{- toYaml .Values.args | nindent 12 }}
          {{- end }}
          ports:
            {{- range .Values.ports }}
            - name: {{ .name }}
              containerPort: {{ .containerPort }}
              protocol: {{ .protocol }}
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.livenessProbe.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.readinessProbe.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}


          env:
            # Environment variables from global Secret
            {{- include "obliq-sre-agent.globalSecretEnv" $ | nindent 12 }}
            
            # Local environment variables (override global)
            {{- if .Values.env.common }}
              {{- range $key, $value := .Values.env.common }}
            - name: {{ $key }}
              value: {{ $value | quote }}
              {{- end }}
            {{- end }}
            # Service-specific environment variables from main values config
            {{- include "obliq-sre-agent.serviceSpecificEnv" (dict "serviceName" "anomaly-detection" "root" $) | nindent 12 }}
            
            # Local app environment variables (override global if any)
            {{- if .Values.env.app }}
              {{- range $key, $value := .Values.env.app }}
            - name: {{ $key }}
              value: {{ $value | quote }}
              {{- end }}
            {{- end }}
            
            # Database secret environment variables
            {{- if .Values.secrets.database }}
            {{- range $key, $value := .Values.secrets.database }}
            {{- if $value }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "anomaly-detection.fullname" $ }}-secrets
                  key: {{ $key }}
            {{- end }}
            {{- end }}
            {{- end }}
            
            # API secret environment variables
            {{- if .Values.secrets.api }}
            {{- range $key, $value := .Values.secrets.api }}
            {{- if $value }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "anomaly-detection.fullname" $ }}-secrets
                  key: {{ $key }}
            {{- end }}
            {{- end }}
            {{- end }}
            
            # External service secret environment variables
            {{- if .Values.secrets.external }}
            {{- range $key, $value := .Values.secrets.external }}
            {{- if $value }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "anomaly-detection.fullname" $ }}-secrets
                  key: {{ $key }}
            {{- end }}
            {{- end }}
            {{- end }}
            
            # Kubernetes metadata as environment variables
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SERVICE_ACCOUNT
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
          {{- if or .Values.volumes.persistent.enabled .Values.volumes.config.enabled .Values.volumes.emptyDir.enabled }}
          volumeMounts:
            {{- if .Values.volumes.persistent.enabled }}
            - name: persistent-storage
              mountPath: {{ .Values.volumes.persistent.mountPath }}
            {{- end }}
            {{- if .Values.volumes.config.enabled }}
            - name: config-volume
              mountPath: {{ .Values.volumes.config.mountPath }}
              {{- if .Values.volumes.config.subPath }}
              subPath: {{ .Values.volumes.config.subPath }}
              {{- end }}
            {{- end }}
            {{- if .Values.volumes.emptyDir.enabled }}
            - name: temp-storage
              mountPath: {{ .Values.volumes.emptyDir.mountPath }}
            {{- end }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- if or .Values.volumes.persistent.enabled .Values.volumes.config.enabled .Values.volumes.emptyDir.enabled }}
      volumes:
        {{- if .Values.volumes.persistent.enabled }}
        - name: persistent-storage
          persistentVolumeClaim:
            claimName: {{ include "anomaly-detection.fullname" . }}-pvc
        {{- end }}
        {{- if .Values.volumes.config.enabled }}
        - name: config-volume
          configMap:
            name: {{ include "anomaly-detection.fullname" . }}-config
        {{- end }}
        {{- if .Values.volumes.emptyDir.enabled }}
        - name: temp-storage
          emptyDir:
            {{- if .Values.volumes.emptyDir.medium }}
            medium: {{ .Values.volumes.emptyDir.medium }}
            {{- end }}
            {{- if .Values.volumes.emptyDir.sizeLimit }}
            sizeLimit: {{ .Values.volumes.emptyDir.sizeLimit }}
            {{- end }}
        {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- if .Values.autoscaling.enabled }}
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "anomaly-detection.fullname" . }}
  labels:
    {{- include "anomaly-detection.labels" . | nindent 4 }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "anomaly-detection.fullname" . }}
  minReplicas: {{ .Values.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.autoscaling.maxReplicas }}
  metrics:
    {{- if .Values.autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.targetCPUUtilizationPercentage }}
    {{- end }}
    {{- if .Values.autoscaling.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ .Values.autoscaling.targetMemoryUtilizationPercentage }}
    {{- end }}
{{- end }}
{{- if .Values.hpa.enabled }}
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "anomaly-detection.fullname" . }}-hpa
  labels:
    {{- include "anomaly-detection.labels" . | nindent 4 }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "anomaly-detection.fullname" . }}
  minReplicas: {{ .Values.hpa.minReplicas }}
  maxReplicas: {{ .Values.hpa.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.hpa.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ .Values.hpa.targetMemoryUtilizationPercentage }}
  {{- if .Values.hpa.behavior }}
  behavior:
    {{- toYaml .Values.hpa.behavior | nindent 4 }}
  {{- end }}
{{- end }}
